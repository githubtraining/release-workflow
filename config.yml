title: Creating a Release Based Workflow
tagline: Learn and practice a workflow based around creating releases on GitHub.
description: This course focuses on releases, and more complex branching strategies.
tags:
  - GitHub
template:
    name: release-based-workflow
    repo: AlienInvasion
before:
  # enable branch protection
  - type: updateBranchProtection
  # creating a welcome issue that will have the user's first instructions
  - type: createIssue
    title: Welcome
    body: 00.1_welcome.md

steps:

  #1 - ask the user to create a beta release from the most recent commit on master
  - title: Create a beta release
    description: Create a beta release, or a pre-release, from the existing codebase.
    event: release.published
    link: '{{ repoUrl }}/issues/1'
    actions:
      # creates an issue with the next instructions about project boards
      - type: createIssue
        title: Organizing a release
        body: 01.1_project-board.md
        action_id: trackingIssue
      # responding in the first welcome issue, pointing the user to the next issue just created
      - type: respond
        issue: Welcome
        with: 00.2_next-step.md
        data:
          url: '%actions.trackingIssue.data.html_url%'
          releases: '{{ repoURl }}/releases'
      # closes the welcome issue
      - type: closeIssue
        issue: Welcome

  #2 - The user should create a project board
  - title: Prepare for the next release
    description: Create a project board.
    event: project.created
    link: '{{ repoUrl }}/issues/2'
    actions:
    - type: respond
      issue: Organizing a release
      with: 01.2_project-column.md

  #3 - The user should create a project column
  - title: Adding columns
    description: Create a project column.
    event: project_column.created
    link: '{{ repoUrl }}/issues/2'
    actions:
    - type: respond
      issue: Organizing a release
      with: 01.3_move-a-card.md

  #4 - The user should add a card to the project board
  - title: Triaging issues
    description: Add an issue to a project column.
    event: project_card.created
    link: '{{ repoUrl }}/issues/2'
    actions:
      - type: createIssue
        title: Creating a release branch
        body: 02.1_release-branches.md
        action_id: branchPrompt
      - type: respond
        with: 01.4_projects-success.md
        issue: Organizing a release
        data:
          url: '%actions.branchPrompt.data.html_url%'

  #5 - The user should create a release branch
  - title: Branching strategies
    description: Create a release branch.
    event: create
    link: '{{ repoUrl }}/issues/3'
    actions:
      - type: updateBranchProtection
        branch: release-v1.0
      # creating a third issue for the user, asking them to go through the GitHub flow to make a change
      - type: createIssue
        title: Please fix this bug
        body: 03.1_update-readme.md
        action_id: fixbugIssue
      - type: respond
        with: 02.2_branch-success.md
        data:
          url: '%actions.fixbugIssue.data.html_url%'
      - type: closeIssue
        issue: Branching strategies

  #6 - User creates a branch making a change and opens a pull request against `base: release-v1.0`
  - title: Adding a feature
    description: Create a branch, update the README.md, and open a pull request.
    event: pull_request.opened
    link: '{{ repoUrl }}/issues/3'
    actions:
      # We make sure that the user's pull request has the base set to `release-v1.0`
      - type: gate
        left: '%payload.pull_request.base.ref%'
        operator: ===
        right: 'release-v1.0'
        # If the user opened a pull request to master instead...
        else:
          # we comment and tell them that they should try again
          - type: respond
            with: 03.2_wrong-base.md
            issue: '%payload.pull_request.number%'
          # and we close the pull request, unmerged
          - type: closeIssue
            issue: '%payload.pull_request.number%'
      # If the user does everything right, we remove protections on the release branch so they can merge
      - type: removeBranchProtection
        branch: release-v1.0
      # We approve their pull request
      # TODO: APP TO ADD COMMIT WITH A BUG
      - type: createReview
        body: 03.2_approval.md
        event: APPROVE

  #7 - The user merges their pull request into the release branch
  - title: Merge the pull request
    description: Merge the pull request to update the release branch.
    event: pull_request.closed
    link: '{{ repoURL }}/pull/4'
    actions:
      # Because the event is the same for both, we make sure that the pull request is merged, and not just closed.
      - type: gate
        left: '%payload.pull_request.merged%'
        # If the pull request was closed with unmerged commits...
        else:
          # We reopen the pull request
          - type: octokit
            method: issues.edit
            state: open
            owner: '%payload.repository.owner.login%'
            repo: '%payload.repository.name%'
            number: '%payload.repository.pull_request.number%'
          # We comment and let them know that they should merge
          - type: respond
            with: 04.3_early-close.md
            issue: '%payload.repository.pull_request.number%'
      # If the user does everything right, we create the next issue with instructions to create a pull request from the release branch into master
      - type: createIssue
        title: Create a release pull request
        body: 04.1_release-pr.md
        action_id: releaseIssue
      # We comment in the merged pull request, and point them to the new issue with instructions
      - type: respond
        issue: '{{ repoUrl }}/pull/4'
        with: 03.3_response.md
        data:
          url: '%actions.releaseIssue.data.html_url%'
      # We re-enable branch protection on the release branch
      - type: updateBranchProtection
        branch: release-v1.0

  #8 - The user opens a pull request from the release branch into master
  - title: Prepare to merge your release into master
    description: Create the release pull request with base as master, and compare as the release branch.
    event: pull_request.opened
    link: '{{ repoURL }}/issues/5'
    actions:
      # We check that the pull request has the correct "base" and "compare"
      - type: gate
        gates:
          - left: '%payload.pull_request.base.ref%'
            operator: ===
            right: master
          - left: '%payload.pull_request.base.ref%'
            operator: ===
            right: release-v1.0
        # If they do not have the correct base and compare fields...
        else:
          # We comment and tell them that the base and compare are wrong, and to try again
          - type: respond
            with: 05.2_wrong-base.md
            issue: '%payload.repository.pull_request.number%'
          # We close the pull request
          - type: closeIssue
            issue: '%payload.pull_request.url%'
      # If they did everything right, we create a new pull request going into the release branch.
      # Currently the change is very minor, but it should make sense with the release.
      - type: createPullRequest
        title: More features for the next release
        body: 05.1_new-pr.md
        head: feature-for-v1
        base: release-v1.0
        action_id: morefeaturesPR
      # We reply in the new pull request they created and point them to the new PR we just made
      - type: respond
        with: 05.2_response.md
        issue: '%payload.pull_request.number%'
        data:
          url: '%actions.morefeaturesPR.data.html_url%'

  #9 - The user should review the pull request
  - title: Review other work for this release
    description: The release will contain work from multiple pull requests. Approve the other open pull request to merge changes into the release branch.
    event: pull_request_review.submitted
    link: '{{ repoURL }}/pull/7'
    actions:
      # We merge the pull request into the release branch
      - type: mergePullRequest
      # We delete the feature branch
      - type: octokit
        method: gitdata.deleteReference
        owner: '%payload.repository.owner.login%'
        repo: '%payload.repository.name%'
        ref: heads/feature-for-v1
      # We create a new issue with instructions for release notes
      - type: createIssue
        title: Install a GitHub app to help with release notes
        body: 06.1_github-app.md
        action_id: appIssue
      # We respond in the merged pull request pointing the user to the new issue
      - type: respond
        with: 06.2_response.md
        issue: '%payload.pull_request.number%'
        data:
          url: '%actions.appIssue.data.html_url%'

  #10 - The user installs the GitHub app, and closes this issue.
  - title: Automate your release notes
    description: Install the GitHub app to automate the production of release notes.
    event: issues.closed
    link: '{{ repoUrl }}/issue/8'
    actions:
      # We approve the release pull request
      - type: createReview
        body: 07.1_approve-release.md
        event: APPROVE
        number: 6
      # We remove branch protections so they can merge
      - type: removeBranchProtection
      # We comment in the release note issue, pointing to the release pull request
      - type: respond
        with: 07.2_point-to-pr.md
        data:
          url: '{{ repoURL }}/issue/8'

  #11 - The user merges the release branch into master
  - title: Merge the release
    description: Merge the release branch in the pull request to finalize this release.
    event: pull_request.closed
    link: '{{ repoURL }}/pull/7'
    actions:
      # We check that the pull request was merged, not closed
      - type: gate
        left: '%payload.pull_request.merged%'
        # If it was closed, we...
        else:
          # Reopen the pull request
          - type: octokit
            method: issues.edit
            state: open
            owner: '%payload.repository.owner.login%'
            repo: '%payload.repository.name%'
            number: '%payload.repository.pull_request.number%'
          # We respond to ask them to merge instead of closing
          - type: respond
            with: 08.1_early-close.md
      # We create a new issue asking them to turn the draft release into a published release
      - type: createIssue
        title: Finalize the release
        body: 08.2_finalize-release.md
        action_id: finalIssue
     # We comment in the merged pull request, pointing users to final instructions
      - type: respond
        with: 08.3_nice-merge.md
        data:
          url: '%actions.finalIssue.data.html_url%'

  #12 - User creates a release from the draft
  - title: Finalize the release
    description: Complete the release by publishing the drafted release
    event: release.published
    link: '%actions.finalIssue.data.html_url%'
    actions:
      # We comment in the issue, congratulating them
      - type: respond
        with: 09.1_congratulations.md
        issue: Finalize the release
      # We close the issue because we won't use it anymore
      - type: closeIssue
        issue: Finalize the release
      # We also close the tracking issue
      - type: closeIssue
        issue: Organizing a release
      # We move the tracking issue to "done" on the project board
      #- type: octokit
      #  method: projects.moveProjectCard
      #  card_id: '%actions.releaseIssueCard.data.id%'
      #  position: 1
      #  column_id: '%actions.columnDone.data.id%'
